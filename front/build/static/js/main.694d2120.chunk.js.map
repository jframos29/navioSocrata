{"version":3,"sources":["NavioComponent.js","Banner.js","Banner2.js","App.js","serviceWorker.js","index.js"],"names":["NavioComponent","prevProps","data","this","props","nv","navio","divNavio","addAllAttribs","visualizar","ref","Component","Banner","info","className","num","App","state","infoData","historico","viz","numPagina","value","url","onClick","bind","fetch","method","credentials","headers","then","resultado","json","resp","setState","e","target","m","r","a","length","alert","limit","offset","arr","push","valor","Promise","resolve","reject","setTimeout","auxiliar2","rp","arr1","flat","body","JSON","stringify","fecha","Date","console","log","result","onClickDelete","map","element","type","onChange","Banner2","aquiNavio","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.694d2120.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport navio from \"navio\";\r\n\r\nclass NavioComponent extends Component {\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.data !== this.props.data) {\r\n      const nv = navio(this.divNavio, 600);\r\n        nv.data(this.props.data);\r\n        nv.addAllAttribs();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    if(this.props.visualizar){\r\n    return (<div ref={divNavio=> this.divNavio=divNavio}>\r\n    </div>);}\r\n    else{\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default NavioComponent;","import React, { Component } from 'react';\r\nimport './DottedBox.css';\r\n\r\nclass Banner extends Component {\r\n\r\n  render(){\r\n    if(this.props.info === \"No se ha ingresado la url!\"){\r\n    return (<p>{this.props.info}</p>);\r\n    }\r\n    else if(this.props.info === \"Su información se está cargando. Por favor espere.\"){\r\n      return(<div>\r\n        <p>{this.props.info} </p>\r\n        <div className =\"ruedita\"/>\r\n      </div>);\r\n    }\r\n    else if(this.props.info === \"Hubo un error\"){\r\n      return <p>{this.props.info}</p>\r\n    }\r\n    else{\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Banner;","import React, { Component } from 'react';\r\nimport './DottedBox.css';\r\n\r\nclass Banner extends Component {\r\n\r\n  render(){\r\n    if(this.props.info === \"Su información se está cargando. Por favor espere.\"){\r\n      return(<div>\r\n        <p>Numero de páginas obtenidas: {this.props.num}</p>\r\n      </div>);\r\n    }\r\n    else{\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Banner;","import React from 'react';\nimport NavioComponent from './NavioComponent';\nimport Banner from './Banner';\nimport Banner2 from \"./Banner2\";\nimport './DottedBox.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      infoData: \"No se ha ingresado la url!\",\n      historico: [],\n      viz: false,\n      numPagina: 0\n    };\n    this.value = \"\";\n    this.url = \"\";\n    this.numPagina = 0;\n    this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"/obtenerHistorico\", {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Accept': 'application/json',\n      }\n    }).then((resultado) => {\n      resultado.json().then((resp) => {\n        this.setState({ historico: resp })\n      });\n    });\n  }\n\n  onChange(e) {\n    this.value = e.target.value;\n  }\n\n  async onClickDelete() {\n    await fetch(\"/borrarHistorico\", {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    const m= await fetch(\"/obtenerHistorico\", {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Accept': 'application/json',\n      }\n    })\n    const r= await m.json();\n    await this.setState({ historico: r })\n  }\n\n  onClick(value) {\n    return async () => {\n      if(value===\"\"){\n        value=this.value;\n      }\n      if (value.length === 0) {\n        alert(\"Debe ingresar una URL\");\n      }\n      else {\n        this.setState({ infoData: \"Su información se está cargando. Por favor espere.\", viz: false, numPagina: 0 });\n        try {\n          let limit = 100;\n          let offset = 0;\n          this.url = \"\" + value + \"?$limit=\" + limit + \"&$offset=\" + offset;\n          let arr = [];\n          const a = await fetch(this.url, {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          let json = await a.json();\n          arr.push(json);\n          let valor = json.length;\n          while (valor !== 0) {\n            let r = await new Promise((resolve, reject) => {\n              setTimeout(this.auxiliar2(this.url, resolve), 300);\n            });\n            valor = r.length;\n            arr.push(r);\n            offset = offset + limit;\n            this.url = \"\" + value + \"?$limit=\" + limit + \"&$offset=\" + offset;\n            let rp = this.state.numPagina + 1;\n            this.setState({ numPagina: rp });\n          }\n          const arr1 = arr.flat();\n          await fetch(\"/enviarHistorico\", {\n            method: 'POST',\n            credentials: \"same-origin\",\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              url: value,\n              fecha: new Date()\n            })\n          })\n          await this.setState({ data: arr1, infoData: \"OK\", viz: true });\n          fetch(\"/obtenerHistorico\", {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n              'Accept': 'application/json',\n            }\n          }).then((resultado) => {\n            resultado.json().then((resp) => {\n              this.setState({ historico: resp })\n            });\n          });\n\n        }\n        catch (e) {\n          console.log(e);\n          this.setState({ infoData: \"Hubo un error\" });\n        }\n      }\n    }\n  }\n\n  auxiliar2(url, resolve) {\n    return async () => {\n      const result = await fetch(url, {\n        method: 'GET',\n        credentials: \"same-origin\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      })\n      const json = await result.json();\n      resolve(json);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>App de visualización de datos de Socrata con Navio</h2>\n        <p>Seleccione una busqueda histórica en el histórico de peticiones o ingrese la URL en el campo y oprima el botón Enviar URL</p>\n        <div className=\"bannerHistorial\"><h3>Histórico de peticiones</h3><button onClick={this.onClickDelete.bind(this)}> Eliminar histórico disponible</button></div>\n        <div className=\"historial\">\n          {this.state.historico.map((element) => {\n            return <button onClick={this.onClick(element.url)}>Fecha: {element.fecha} url: {element.url}</button>;\n          }\n          )}\n        </div>\n        <input type=\"text\" onChange={this.onChange.bind(this)} />\n        <button onClick={this.onClick(\"\")}>Enviar URL</button>\n        <Banner info={this.state.infoData} />\n        <Banner2 info={this.state.infoData} num={this.state.numPagina} />\n        <NavioComponent visualizar={this.state.viz} data={this.state.data} ref={aquiNavio => this.aquiNavio = aquiNavio} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}